name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.16.0]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Create dist directory
        run: mkdir -p ./dist

      - name: Install Wine
        run: sudo dpkg --add-architecture i386 && sudo apt update && sudo apt install -y wine64 wine32

      - name: Build application
        run: npm run dist

      - name: Create latest.yml
        run: npm run create-latest-yml

      - name: Create latest.json
        run: npm run create-latest-json

      - name: Generate blockmap
        run: npm run generate-blockmap

      - name: Generate checksum
        run: npm run generate-checksum

      - name: Create a new directory for release files
        run: mkdir -p ./dist/release-files

      - name: Archivate program files
        run: |
          cd ./dist/slpb-win32-x64 && zip -r ../../slpb-win32-x64.zip ./*

      - name: Verify ZIP file creation (Debug)
        run: |
          echo "Checking if the zip file was created..."
          if [ -f ./dist/slpb-win32-x64.zip ]; then
            echo "ZIP file created successfully at ./dist/slpb-win32-x64.zip"
          else
            echo "Failed to create ZIP file!"
            exit 1
          fi

      - name: List files in dist directory (Debug)
        run: ls -la ./dist

      - name: List files in root directory (Debug)
        run: ls -la

      - name: Move files to release directory
        run: |
          mv ./dist/latest.yml ./dist/release-files/ && echo "latest.yml moved successfully" || echo "Failed to move latest.yml"
          mv ./dist/latest.json ./dist/release-files/ && echo "latest.json moved successfully" || echo "Failed to move latest.json"
          mv ./dist/slpb-win32-x64.zip ./dist/release-files/ && echo "slpb-win32-x64.zip moved successfully" || echo "Failed to move slpb-win32-x64.zip"
          mv ./dist/slpb.blockmap ./dist/release-files/ && echo "slpb.blockmap moved successfully" || echo "Failed to move slpb.blockmap"
          mv ./LICENSE ./dist/release-files/ && echo "LICENSE moved successfully" || echo "Failed to move LICENSE"
          mv ./README.md ./dist/release-files/ && echo "README.md moved successfully" || echo "Failed to move README.md"

      - name: List files in release directory (Debug)
        run: ls -la ./dist/release-files

      - name: Upload build artifact (release-files)
        uses: actions/upload-artifact@v3
        with:
          name: release-files
          path: ./dist/release-files

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download release files artifact
      uses: actions/download-artifact@v3
      with:
        name: release-files

    - name: List downloaded files for debugging
      run: |
        echo "Listing files in release-files directory:"
        ls -al ./release-files

    - name: Extract Version from Tag
      id: extract_version
      run: echo "VERSION=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: ${{ env.VERSION }}
        draft: true
        prerelease: false

    - name: Check if slpb-win32-x64.zip exists
      run: |
        if [ -f "./release-files/slpb-win32-x64.zip" ]; then
          echo "slpb-win32-x64.zip found."
          ls -lh ./release-files/slpb-win32-x64.zip
        else
          echo "slpb-win32-x64.zip not found."
          exit 1
        fi

    - name: Upload Release Assets (Individual Files)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/slpb-win32-x64.zip
        asset_name: slpb-win32-x64.zip
        asset_content_type: application/zip

    - name: Upload Release Assets (latest.yml)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/latest.yml
        asset_name: latest.yml
        asset_content_type: text/yaml

    - name: Upload Release Assets (LICENSE)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/LICENSE
        asset_name: LICENSE
        asset_content_type: text/plain

    - name: Upload Release Assets (README.md)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/README.md
        asset_name: README.md
        asset_content_type: text/markdown

    - name: Upload Release Assets (latest.json)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/latest.json
        asset_name: latest.json
        asset_content_type: application/json

    - name: Upload Release Assets (slpb.blockmap)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/slpb.blockmap
        asset_name: slpb.blockmap
        asset_content_type: application/octet-stream